import type { NextPage } from 'next';
import Head from 'next/head';
import { FC, useEffect, useRef, useState } from 'react';
import { Scene, WebGLRenderer, PerspectiveCamera, LineBasicMaterial, Vector3, BufferGeometry, Line } from 'three';
import { VRButton } from '../components/xr/VRButton';

const AppCanvas: FC<{}> = () => {
  const canvasContainerRef = useRef<HTMLDivElement | null>(null);
  const [app, setApp] = useState<{ scene: Scene; renderer: WebGLRenderer; camera: PerspectiveCamera }>();

  useEffect(() => {
    VRButton.registerSessionGrantedListener();

    const scene = new Scene();

    const renderer = new WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    const canvas = canvasContainerRef.current;
    canvas?.appendChild(renderer.domElement);

    const camera = new PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
    camera.position.set(0, 0, 100);
    camera.lookAt(0, 0, 0);

    // const line = (() => {
    //   const material = new LineBasicMaterial({ colorWrite: true });
    //   const geometry = new BufferGeometry().setFromPoints([new Vector3(-10, 0, 0), new Vector3(0, 0, 0), new Vector3(10, 0, 0)]);
    //   return new Line(geometry, material);
    // })();
    // scene.add(line);

    renderer.xr.enabled = true;
    const vrButton = VRButton.createButton(renderer);
    canvas?.appendChild(vrButton);

    setApp({ scene, renderer, camera });
    renderer.render(scene, camera);

    return () => {
      // Dispose Mesh, Geometries, Materials, Textures, ...
      // refs: https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects

      // Unmount canvas.
      canvas?.removeChild(renderer.domElement);
    };
  }, []);

  return <div ref={canvasContainerRef}></div>;
};

const Home: NextPage = () => {
  // const appRootRef = useRef<HTMLDivElement | null>(null);

  // const [scene, setScene] = useState<Scene>();
  // const [renderer, setRenderer] = useState<WebGLRenderer>();
  // const [camera, setCamera] = useState<PerspectiveCamera>();
  // const [app, setApp] = useState<{ scene: Scene; renderer: WebGLRenderer; camera: PerspectiveCamera }>();

  // useEffect(() => {
  //   console.log('was');
  //   const scene = new Scene();

  //   const renderer = new WebGLRenderer();
  //   renderer.setSize(window.innerWidth, window.innerHeight);
  //   appRootRef.current?.appendChild(renderer.domElement);

  //   const camera = new PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
  //   camera.position.set(0, 0, 100);
  //   camera.lookAt(0, 0, 0);

  //   setApp({ scene, renderer, camera });
  //   renderer.render(scene, camera);
  // }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppCanvas />
    </div>
  );
};

export default Home;
